rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated and has admin role
    function isAdmin() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // Helper function to check if the user is the Owner (super-admin)
    function isOwner() {
      return request.auth != null
        && request.auth.uid == "JZgMG6xdwAYInXsdciaGj6qNAsG2"; // Replace with your actual Owner UID
    }

    // PARTICIPANTS COLLECTION
    match /participants/{participantId} {
      // Public read access
      allow read: if true;

      // Only Owner or Admin can create or delete participants
      allow create, delete: if isOwner() || isAdmin();

      // Updates allowed:
      // - Owner/Admin can update anything
      // - Any authenticated user can update only specific status fields
      allow update: if (isOwner() || isAdmin())
                    || (request.auth != null
                        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'attended', 'checkInTime']));
    }

    // STAFF MEMBERS COLLECTION
    match /staff_members/{staffMemberId} {
      // Read access for any authenticated user
      allow read: if true;

      // Only Owner or Admin can create or delete staff members
      allow create, delete: if isOwner() || isAdmin();

      // Updates allowed:
      // - Owner/Admin can update anything
      // - Any authenticated user can update only specific status fields
      allow update: if (isOwner() || isAdmin())
                    || (request.auth != null
                        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']));
    }

    // SYSTEM COLLECTIONS: Schools, Committees, Staff Teams, Config
    // Read access is public, write access only for Owner
    match /system_schools/{schoolId} {
      allow read: if true;
      allow write: if isOwner();
    }

    match /system_committees/{committeeId} {
      allow read: if true;
      allow write: if isOwner();
    }

    match /system_staff_teams/{teamId} {
      allow read: if true;
      allow write: if isOwner();
    }

    match /system_config/{settingId} {
      allow read: if true;
      allow write: if isOwner();
    }

    // USERS COLLECTION - For managing admin roles, etc.
    match /users/{userId} {
      // Write access only for Owner (for role/admin management)
      allow write: if isOwner();

      // Read access for Owner or the user himself/herself
      allow read: if isOwner() || (request.auth != null && request.auth.uid == userId);
    }

    // Allow Owner only to list all users
    match /users {
      allow list: if isOwner() || isAdmin();
    }

    // MONOSPACES ANALYTICS SUBCOLLECTION (nested)
    match /monospaces/{monospaceId}/analytics/{docId} {
      // Read access only for authenticated users
      allow read: if request.auth != null;
    }
  }
}